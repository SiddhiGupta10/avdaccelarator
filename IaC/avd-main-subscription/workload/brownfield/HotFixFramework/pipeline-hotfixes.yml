trigger: none

parameters:
- name: environment
  displayName: 'Environment to deploy to'
  type: string
  default: 'test'
  values:
    - test
    - integration

variables:
- ${{ if eq(parameters.environment, 'test') }}:
  - template: pipeline-hotfixes.variables.tst.yml
- ${{ if eq(parameters.environment, 'integration') }}:
  - template: pipeline-hotfixes.variables.int.yml

pool:
  name: $(poolName)

stages:
- stage: BuildandUploadManifest
  displayName: Build manifest nad upload manifest and hotfixes to storage
  jobs:
  - job: GenerateAndUpload
    displayName: Build manifest
    steps:
    - task: Bash@3
      displayName: 'Build manifest'
      inputs:
        targetType: 'inline'
        script: |
          set -euo pipefail
          # Explicit source directory (adjust if different):
          SOURCE_DIR="$(Build.SourcesDirectory)/$(hotfixRelativePath)"
          OUT_DIR="artifact-hotfixes"
          mkdir -p "$OUT_DIR"

          echo "Enumerating scripts (pattern: hf-*.ps1)..."
          ls -1 "$SOURCE_DIR"/hf-*.ps1 2>/dev/null || {
            echo "ERROR: No hotfix scripts found in $SOURCE_DIR (hf-*.ps1)" >&2
            exit 1
          }

          manifest="$OUT_DIR/manifest.json"
          echo "[" > "$manifest"
          first=1
          for f in "$SOURCE_DIR"/hf-*.ps1; do
            [ -f "$f" ] || continue
            id=$(basename "$f" .ps1)
            uri="https://$(storageAccountName).blob.core.windows.net/hotfixes/$id.ps1"
            checksum=$(sha256sum "$f" | awk '{print $1}')
            if [ $first -eq 1 ]; then
              first=0
            else
              echo "," >> "$manifest"
            fi
            printf '  {"Id":"%s","Uri":"%s","Checksum":"%s"}' "$id" "$uri" "$checksum" >> "$manifest"
          done
          echo "" >> "$manifest"
          echo "]" >> "$manifest"

          echo "Manifest built:"
          cat "$manifest"

          # Stage scripts + manifest together (optional)
          cp -f "$SOURCE_DIR"/hf-*.ps1 "$OUT_DIR"/

          echo "Staged files:"
          ls -1 "$OUT_DIR"

    - task: AzureCLI@2
      displayName: 'Upload manifest and hotfixes to storage'
      inputs:
        azureSubscription: '$(staServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -euo pipefail
          OUT_DIR="artifact-hotfixes"

          echo "Uploading manifest..."
          az storage blob upload \
            --account-name $(storageAccountName) \
            --container-name hotfixes \
            --name manifest.json \
            --file "$OUT_DIR/manifest.json" \
            --overwrite \
            --auth-mode login

          echo "Uploading scripts..."
          az storage blob upload-batch \
            --account-name $(storageAccountName) \
            --destination hotfixes \
            --source "$OUT_DIR" \
            --pattern "hf-*.ps1" \
            --overwrite \
            --auth-mode login

